facet_wrap(~ma.ingest, scales = "free") %>% theme_light()
#### Exploring Sanctions ####
duid.att.df %>% filter(id %in% dat$id) %>%
left_join(select(dd.df, -ma.ingest), by = "id") %>%
ggplot(aes(x = duid.att.sanction, y = dd.total)) +
geom_point() +
facet_wrap(~ma.ingest, scales = "free") + theme_light()
#### Exploring Sanctions ####
duid.att.df %>% filter(id %in% dat$id) %>%
left_join(select(dd.df, -ma.ingest), by = "id") %>%
ggplot(aes(x = duid.att.sanction, y = dd.total)) +
geom_jitter(height = 0, width = 0.2) +
facet_wrap(~ma.ingest, scales = "free") + theme_light()
#### Exploring Sanctions ####
duid.att.df %>% filter(id %in% dat$id) %>%
left_join(select(dd.df, -ma.ingest), by = "id") %>%
ggplot(aes(x = duid.att.sanction, y = dd.total)) +
geom_jitter(height = 0, width = 0.02) +
facet_wrap(~ma.ingest, scales = "free") + theme_light()
stat.test
stat.test %>% view
#### Exploring Peer Attitudes ####
duid.att.df %>% filter(id %in% dat$id) %>%
left_join(select(dd.df, -ma.ingest), by = "id") %>%
ggplot(aes(x = duid.att.peer, y = dd.total)) +
geom_jitter(height = 0, width = 0.02) +
facet_wrap(~ma.ingest, scales = "free") + theme_light()
### Exploring Risk Attitudes ####
duid.att.df %>% filter(id %in% dat$id) %>%
left_join(select(dd.df, -ma.ingest), by = "id") %>%
ggplot(aes(x = duid.att.risk, y = dd.total)) +
geom_jitter(height = 0, width = 0.02) +
facet_wrap(~ma.ingest, scales = "free") + theme_light()
#### Load ####
if(!"packages" %in% ls()){
source("scripts/load-packages.R")
}
source("scripts/functions.R")
load("objects/all-objects.RData")
#### Attitudes boxplot ####
dat.long <- dat %>%
pivot_longer(cols = c(duid.att.risk, duid.att.sanction, duid.att.peer), names_to = "att.subscale") %>%
mutate(
# att.subscale = factor(att.subscale, levels = c("duid.att.risk", "duid.att.sanction", "duid.att.peer")),
att.subscale = case_when(
att.subscale == "duid.att.risk" ~ "Risks",
att.subscale == "duid.att.sanction" ~ "Sanctions",
att.subscale == "duid.att.peer" ~ "Peer Attitudes"
),
group = if_else(ma.ingest, "Methamphetamine Users", "Non-Drug Users"))
stat.test <- dat.long %>%
group_by(att.subscale) %>%
t_test(value ~ group) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
p.att.score <- ggboxplot(dat.long, x = "att.subscale", y = "value", width = 0.5, fill = "group") +
stat_pvalue_manual(stat.test, x = "att.subscale", y.position = 7.5, label = "p.adj") +
labs(fill = element_blank(),
x = "Attitude Factor",
y = "Score") +
scale_fill_brewer(palette = "OrRd") +
scale_y_continuous(breaks = seq(2, 7, 1)) +
theme(axis.title = element_text(face = 'bold'))
# Summary of Data ---------------------------------------------------------
t.summ <- select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest,
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(dd.total ~ "DDDI Total",
duid.att.mean ~ "DUID Attitude Mean",
duid.att.risk ~ "DUID Attitude (Risk)",
duid.att.sanction ~ "DUID Attitude (Sanction)",
duid.att.peer ~ "DUID Attitude (Peer)")) %>% add_p()
t.summ
#### T test between groups for DD ####
dat %>% t_test(dd.total ~ ma.ingest) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
#### T test between groups for DD ####
dat %>% t_test(dd.total ~ ma.ingest) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj)) %>% broom::tidy()
#### T test between groups for DD ####
dat %>% t_test(dd.total ~ ma.ingest) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
#### T test between groups for DD ####
dat %>% t_test(dd.total ~ ma.ingest) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
?t.test
t.test(dd.total ~ ma.ingest, data = dat)
dat %>% count(ma.ingest)
#### Piecewise SEM  ####
# (basically does all the above stuff in one go lol)
model.psem <- piecewiseSEM::psem(lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, dat))
model.psem
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
#### Free & Constrained Models ####
# Free Model
mgp.model <- "dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer"
mgp.free <- sem(mgp.model, data = dat, group = "ma.ingest")
# Constrained Model
mgp.constrained <- sem(mgp.model, dat, group = "ma.ingest", group.equal = c("intercepts", "regressions"))
# Comparing two models
anova(mgp.free, mgp.constrained) #%>% broom::tidy()
summary(mgp.constrained)
#### Comparing single constraints ####
# Risk
mgp.risk.model <- c("dd.total ~ c(b1, b1) * duid.att.risk + duid.att.sanction + duid.att.peer")
mgp.risk <- sem(mgp.risk.model, dat, group = "ma.ingest")
anova(mgp.free, mgp.risk)
anova(mgp.free, mgp.risk)
# Sanction
mgp.sanction.model <-  c("dd.total ~ c(b1, b1) * duid.att.sanction + duid.att.risk + duid.att.peer")
mgp.sanction <- sem(mgp.sanction.model, dat, group = "ma.ingest")
anova(mgp.free, mgp.sanction)
anova(mgp.free, mgp.sanction)
# Peer
mgp.peer.model <- c("dd.total ~ c(b1, b1) * duid.att.peer + duid.att.risk + duid.att.sanction")
mgp.peer <- sem(mgp.peer.model, dat, group = "ma.ingest")
anova(mgp.free, mgp.peer)
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
lm.ndu %>% tidy()
lm.ndu %>% broom::tidy()
lm.ma %>% tidy()
p.att.score
p.att.score <- ggboxplot(dat.long, x = "att.subscale", y = "value", width = 0.5, fill = "group") +
stat_pvalue_manual(stat.test, x = "att.subscale", y.position = 7.5, label = "p.adj") +
labs(fill = element_blank(),
x = "Attitude Factor",
y = "Score (Higher = More Favourable)") +
scale_fill_brewer(palette = "OrRd") +
scale_y_continuous(breaks = seq(2, 7, 1)) +
theme(axis.title = element_text(face = 'bold'))
ggsave(p.att.score, width = 900, height = 700, units = 'px', dpi = 95, filename = "output/attitude-boxplot.png")
git status
usethis::create_from_github("https://github.com/ajmackay/AzTools.git")
R.version
installr::updateR()
# Reliability and Factor Loadings
if(!"packages" %in% ls()){
source("scripts/load-packages.R")
}
source("scripts/functions.R")
load("objects/all-objects.RData")
duid.att.items <- duid.att.df %>%
filter(id %in% dat$id) %>%
select(-c(duid.att.risk, duid.att.sanction, duid.att.peer, duid.att.mean, duid.att.full, duid.att.once.while))
# Risk
alpha.risk <- psych::alpha(select(duid.att.items, duid.att.overrated, duid.att.police, duid.att.caught, duid.att.high))
alpha.risk
fa.risk <- psych::fa(select(duid.att.items, duid.att.overrated, duid.att.police, duid.att.caught, duid.att.high))
fa.risk
fa()
packages <- c("janitor",
# "table1",
"gt",
"naniar",
"kableExtra",
# "GGally",
# "mctest",
# "stargazer",
"flextable",
# "xaringan",
"DT",
"patchwork",
"tidyverse",
"olsrr", # For regression checking and results
"broom", # For tidy regression results
"gtsummary",
"officer",
"shadowtext",
"rstatix", # For ANOVA test and quick summary stats
"ggpubr", # Publishable graphs
"gdtools" # For font name
,"lavaan" # path analysis (latent varable analysis)
,"ggfortify" # Regression assumptions plots as ggplot
,"psych" # Functions for psychological research (Cronbach Alpha)
)
librarian::shelf(packages)
message(crayon::green(str_c("Packages Loaded Successfully: ", glue::glue_collapse(packages, sep = ", ", last = " and ") )))
fa.risk
#### Confirmatory Factor Analysis ####
names(duid.att.items) <- names(duid.att.items) %>% str_remove('duid.att.')
# Measurement Model
cfa.measure <- '
risk = ~overrated + police + caught + high
sanctions = ~strict + jail + lose
peers = ~friends + dumb
'
# Saving Model
cfa.att <- cfa(cfa.measure, data = select(duid.att.items, -c(id, ma.ingest)))
# Intercorrelations between latent factors
lavInspect(cfa.att, 'cov.lv')
summary(cfa.att)
summary(cfa.att)
inspect(cfa.att, what = 'std')
?inspect
inspect(cfa.att)
lavInspect(cfa.att)
# Intercorrelations between latent factors
lavInspect(cfa.att, 'cov.lv')
inspect(cfa.att, 'std')
inspect(cfa.att, 'est')
inspect(cfa.att, 'std')
inspect(cfa.att, 'est')
?inspect
# Intercorrelations between latent factors
lavInspect(cfa.att, 'cov.lv')
cfa.att@Fit
inspect(cfa.att, 'std')
summary(cfa.att)
git status
# Reliability and Factor Loadings
if(!"packages" %in% ls()){
source("scripts/load-packages.R")
}
source("scripts/functions.R")
load("objects/all-objects.RData")
duid.att.items <- duid.att.df %>%
filter(id %in% dat$id) %>%
select(-c(duid.att.risk, duid.att.sanction, duid.att.peer, duid.att.mean, duid.att.full, duid.att.once.while))
# Risk
alpha.risk <- psych::alpha(select(duid.att.items, duid.att.overrated, duid.att.police, duid.att.caught, duid.att.high))
# Sanctions
alpha.sanctions <- psych::alpha(select(duid.att.items, duid.att.strict, duid.att.jail, duid.att.lose))
# Peer Attitudes
alpha.peer <- psych::alpha(select(duid.att.items, duid.att.friends, duid.att.dumb))
#### Confirmatory Factor Analysis ####
names(duid.att.items) <- names(duid.att.items) %>% str_remove('duid.att.')
# Measurement Model
cfa.measure <- '
risk =~ overrated + police + caught + high
sanctions =~ strict + jail + lose
peers =~ friends + dumb
'
# Saving Model
cfa.att <- cfa(cfa.measure, data = select(duid.att.items, -c(id, ma.ingest)))
inspect(cfa.att, 'std')
cfa(cfa.measure, data = select(duid.att.items, -c(id, ma.ingest)), std.lv = TRUE)
cfa.att <- cfa(cfa.measure, data = select(duid.att.items, -c(id, ma.ingest)), std.lv = TRUE)
summar(cfa.att)
summary(cfa.att)
cfa.att.std <- cfa(cfa.measure, data = select(duid.att.items, -c(id, ma.ingest)), std.lv = TRUE)
# Saving Model
cfa.att <- cfa(cfa.measure, data = select(duid.att.items, -c(id, ma.ingest)))
summary(cfa.att.std, standardized = TRUE)
summary(cfa.att, standardized = TRUE)
# Saving Model
cfa.att <- cfa(cfa.measure, data = select(duid.att.items, -c(id, ma.ingest)))
lavInspect(cfa.att, 'cov.lv')
standardizedsolution(cfa.att)
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
inspect(cfa, 'cov.lv')
inspect(cfa.att, 'cov.lv')
lavInspect(cfa.att, 'cov.lv')
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
# Measurement Model
cfa.m1 <- '
risk =~ overrated + police + caught + high
sanctions =~ strict + jail + lose
peers =~ friends + dumb
'
# Saving Model
cfa.att <- cfa(cfa.m1, data = select(duid.att.items, -c(id, ma.ingest)))
cfa.m2 <- '
risk =~ overrated + police + caught + high
sanctions =~ strict + jail + lose
peers =~ friends + dumb
'
duid.att.items
cfa.att2 <- cfa(cfa.m2, data = select(duid.att.items, -c(id.ma.ingest)))
cfa.att <- cfa(cfa.m1, duid.att.items)
inspect(cfa.att, 'cov.lv')
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
# Saving Model
cfa.att <- cfa(cfa.m1, duid.att.items)
inspect(cfa.att, 'cov.lv')
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
standardizedsolution(cfa.att)
cfa.m2 <- '
risk =~ overrated + police + caught + high
sanctions =~ strict + jail + lose
peers =~ friends + dumb
'
cfa.att2 <- cfa(cfa.m2, data = duid.att.items)
summary(cfa.att2, standardized = TRUE, fit.measures = TRUE)
cfa.m2 <- '
risk =~ overrated + caught + high
sanctions =~ strict + jail + lose
peers =~ friends + dumb
'
cfa.att2 <- cfa(cfa.m2, data = duid.att.items)
summary(cfa.att2, standardized = TRUE, fit.measures = TRUE)
save.objects()
librarian::shelf(packages)
?set_flextable_defaults
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit')
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
standardizedsolution(cfa.att)
summary(cfa.att, standardized = TRUE, fit.measures = TRUE) %>% tidy()
inspect(cfa.att, 'cov.lv')
inspect(cfa.att, 'std.cov')
?inspect
inspect(cfa.att, 'std')
inspect(cfa.att, 'std') %>% tidy()
inspect(cfa.att, 'std')
inspect(cfa.att, 'std')$lambda
inspect(cfa.att, 'std')$lambda %>% tidy()
inspect(cfa.att, 'std')$lambda %>% as_tibble()
inspect(cfa.att, 'std')$lambda %>% flextable()
inspect(cfa.att, 'std')$lambda %>% as_tibble() %>% flextable()
?set_flextable_defaults
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 2)
inspect(cfa.att, 'std')$lambda %>% as_tibble() %>% flextable()
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 2)
inspect(cfa.att, 'std')$lambda %>% as_tibble() %>% flextable()
inspect(cfa.att, 'std')$lambda %>% as_tibble()
inspect(cfa.att, 'std')$lambda %>% as_data_frame() %>% flextable()
inspect(cfa.att, 'std')$lambda %>% as_data_frame()
inspect(cfa.att, 'std')$lambda
inspect(cfa.att, 'std')$lambda %>% class()
inspect(cfa.att, 'std')$lambda %>% rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% str()
inspect(cfa.att, 'std')$lambda %>% unnest()
inspect(cfa.att, 'std')$lambda %>% as.data.frame()
inspect(cfa.att, 'std')$lambda %>% as.data.frame() %>% str()
inspect(cfa.att, 'std')$lambda %>% as.data.frame() %>% rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% as.tibble() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% tibble() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% as_tibble() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("test")
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>% flextable()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>% glimpse()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable")
tbl.factor.loadings <- inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>%
mutate(across(where(is.numeric), ~round(.x, 2)))
tbl.factor.loadings
tbl.factor.loadings <- inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>%
mutate(across(where(is.numeric), ~round(.x, 3)))
save.objects()
flextable(tbl.factor.loadings)
?inspect
tbl.cfa.loadings <- inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>%
mutate(across(where(is.numeric), ~round(.x, 3)))
inspect(cfa.att, 'fitted')
inspect(cfa.att, 'information')
inspect(cfa.att, 'fit')
inspect(cfa.att, 'fit')
fitmeasures(cfa.att)
summary(cfa.att)
summary(cfa.att) %>% str()
summary(cfa.att, fit.measures = TRUE) %>% str()
summary(cfa.att, fit.measures = TRUE)$fit
summary(cfa.att, fit.measures = TRUE)
summary(cfa.att, fit.measures = TRUE) %>% flextable()
summary(cfa.att, fit.measures = TRUE) %>% str()
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
#### Piecewise SEM  ####
# (basically does all the above stuff in one go lol)
model.psem <- piecewiseSEM::psem(lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, dat))
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
#### T test between groups for DD ####
dat %>% t_test(dd.total ~ ma.ingest) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
t.test(dd.total ~ ma.ingest, data = dat)
#### Piecewise SEM  ####
# (basically does all the above stuff in one go lol)
model.psem <- piecewiseSEM::psem(lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, dat))
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
tbl.cfa.loadings
tbl.cfa.loadings %>% flextable()
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3)
a
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
save.objects()
#| echo: false
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
dat
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = 'Vanilla')
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = 'vanilla')
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = theme_vanilla())
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = "theme_vanilla")
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = "theme_zebra")
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = "theme_vanilla")
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla') {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun
)
}
set.default.ft()
flextable(tbl.cfa.loadings)
set.default.ft(font.family = 'Times New Roman')
flextable(tbl.cfa.loadings)
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla',
digits = 3, ...) {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun,
digits = digits
)
}
set.default.ft()
flextable(tbl.cfa.loadings)
set.default.ft(digits = 2)
flextable(tbl.cfa.loadings)
set.default.ft(digits = 1)
tibble(x = runif(10), y = runif(10))
tibble(x = runif(10), y = runif(10)) %>% flextable()
set.default.ft(digits = 1)
tibble(x = runif(10), y = runif(10)) %>% flextable()
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = formatC(digits = 1), theme_fun = "theme_vanilla")
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 1, theme_fun = "theme_vanilla")
tibble(x = runif(10), y = runif(10)) %>% flextable()
tibble(x = runif(10), y = runif(10)) %>% qflextable()
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 1, decimal.mark = '.', theme_fun = "theme_vanilla")
tibble(x = runif(10), y = runif(10)) %>% qflextable()
tibble(x = runif(10), y = runif(10)) %>% flextable()
set_flextable_defaults(
digits = 2,
decimal.mark = ",",
big.mark = " ",
na_str = "<na>"
)
tibble(x = runif(10), y = runif(10)) %>% flextable()
head(airquality) |>
mutate(rnum = runif(6, min = 100000, max = 10000000)) |>
qflextable()
set_flextable_defaults(
digits = 3,
decimal.mark = ",",
big.mark = " ",
na_str = "<na>"
)
head(airquality) |>
mutate(rnum = runif(6, min = 100000, max = 10000000)) |>
qflextable()
?qflextable
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla',
digits = 3, ...) {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun,
digits = digits
)
}
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 2, theme_fun = "theme_vanilla")
flextable(tbl.cfa.loadings) %>% flextable::colformat_double()
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 2, decimal.mark = '.', theme_fun = "theme_vanilla")
flextable(tbl.cfa.loadings) %>% flextable::colformat_double()
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla',
digits = 3, ...) {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun,
digits = digits)
if(digits != 3){
cat(crayon::red("Use colformat_double() to adjust digits"))
}
cat(crayon::green("Flextable Default Set"))
}
set.default.ft()
flextable(tbl.cfa.loadings) %>% flextable::colformat_double()
