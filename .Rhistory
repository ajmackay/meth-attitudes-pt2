camcorder::gg_record(
dir = "output/plots",
width = 12,
height = 12 * 9 / 16,
dpi = 300,
bg = NULL
)
plt.att.score <- ggboxplot(dat.long, x = "att.subscale", y = "value", width = 0.5, fill = "group") +
stat_pvalue_manual(stat.test, x = "att.subscale", y.position = 7.5, label = "p.adj") +
labs(
fill = element_blank(),
x = "Attitude Factor",
y = "Score"
) +
scale_fill_brewer(palette = "OrRd") +
scale_y_continuous(breaks = seq(2, 7, 1)) +
theme(axis.title.y = element_text(face = "bold"),
axis.title.x = element_text(face = 'bold', vjust = -2),
axis.text = element_text(size = 11),
legend.text = element_text(size = 11))
plt.att.score
camcorder::gg_stop_recording()
12*9
12*9/16
if (!"packages" %in% ls()) source("scripts/load-packages.R")
source("scripts/functions.R")
load("objects/all-objects.RData")
?piecewiseSEM::multigroup
if(!"packages" %in% ls()) source("scripts/load-packages.R")
source("scripts/functions.R")
load("objects/all-objects.RData")
if(!"packages" %in% ls()) source("scripts/load-packages.R")
source("scripts/functions.R")
load("objects/all-objects.RData")
dat
glimpse(Dat)
glimpse(dat)
# Attitudes ----
#### Mean Difference ####
dat %>%
group_by(ma.ingest) %>%
summarise(mean_cl_normal(duid.att.mean))
?rstatix::t_test
rstatix::t_test(dat, duid.att.mean ~ ma.ingest)
rstatix::t_test(dat, duid.att.mean ~ ma.ingest)
options(scipen = 999)
rstatix::t_test(dat, duid.att.mean ~ ma.ingest)
rstatix::t_test(dat, duid.att.mean ~ ma.ingest)
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>% add_significance()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>% add_significance()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>% add_p()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>% rstatix::add_significance(symbols = "ns")
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>% scales::pvalue(p)
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
mutate(p = scales::pvalue(p))
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
mutate(p = scales::pvalue(p))
format.p
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format.p()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format.p()
format.p
format_p <- function(dat, col = p) {
mutate(dat, p = scales::pvalue(col))
}
# Attitudes ----
#### Mean Difference ####
dat %>%
group_by(ma.ingest) %>%
summarise(mean_cl_normal(duid.att.mean)) %>%
format_p()
dat %>%
group_by(ma.ingest) %>%
summarise(mean_cl_normal(duid.att.mean))
rstatix::t_test(dat, duid.att.mean ~ ma.inest) %>%
format_p()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest)
rstatix::t_test(dat, duid.att.mean ~ ma.ingest)
format_p <- function(dat, col = 'p') {
mutate(dat, p = scales::pvalue(col))
}
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
format_p <- function(dat, col = p) {
mutate(dat, p = scales::pvalue({{col}}))
}
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
format_p <- function(dat, col = p) {
mutate(dat, p = scales::pvalue( {col} ) )
}
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
format_p <- function(dat, col = p) {
mutate(dat, p = scales::pvalue( {{col}} ))
}
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
# Attitudes ----
#### Mean Difference ####
dat %>%
group_by(ma.ingest) %>%
summarise(mean_cl_normal(duid.att.mean))
# Attitudes ----
#### Mean Difference ####
dat %>%
group_by(ma.ingest) %>%
summarise(mean_cl_normal(duid.att.mean),
sd = sd(duid.att.mean))
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
rstatix::t_test(dat, duid.att.mean ~ ma.ingest) %>%
format_p()
dat
glimpse(summ.df)
summ.df %>% count(ma.ingest)
survey.raw
survey.screened %>% count(ma.ingest)
summ.df %>% count(ma.ingest)
summ.df %>% count(ma.ingest) %>% adorn_total()
summ.df %>% count(ma.ingest) %>% adorn_totals()
t_test(dat, age ~ ma.ingest)
dat %>% glimpse()
dems.df %>% filter(id %in% dat)
dems.df %>% filter(id %in% dat$id)
dat.dems
t_test(dat.dems, age ~ ma.ingest)
t_test(dat, dd.att.mean ~ ma.ingest)
t_test(dat, duid.att.mean ~ ma.ingest)
dat %>% filter(!is.na(age))
dat.dems %>% filter(!is.na(age))
dat %>% filter(!is.na(duid.att.mnean))
dat %>% filter(!is.na(duid.att.mean))
dat.dems %>% count(ma.ingest)
t_test(dat.dems, age ~ ma.ingest)
t_test(dat, duid.att.mean ~ ma.ingest)
73+52
t_test(dat, duid.att.mean ~ ma.ingest, detailed = TRUE)
t_test(dat, duid.att.mean ~ ma.ingest, detailed = TRUE)
t_test(dat.dems, age ~ ma.ingest, detailed = TRUE)
t_test(dat.dems, age ~ ma.ingest, detailed = TRUE, paired = FALSE)
t_test(dat.dems, age ~ ma.ingest, detailed = TRUE, paired = TRUE)
?t.test
t.test(filter(dat, ma.ingest)$duid.att.mean, filter(dat, !ma.ingest)$duid.att.mean)
t.test(filter(dat.dems, ma.ingest)$age, filter(dat.dems, !ma.ingest)$age)
t_test(dat.dems, age ~ ma.ingest, detailed = TRUE, paired = TRUE)
t_test(dat.dems, age ~ ma.ingest, detailed = TRUE)
multigroup.model
multigroup.model <- piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
summary(multigroup.model)
multigroup.model
#### Models ####
ma.lm <- lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, filter(dat, ma.ingest))
nma.lm <- lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, filter(dat, !ma.ingest))
summary(ma.lm)
ma.lm %>% psych::summary.psych()
ma.lm %>% tidy()
ma.lm %>% tidy(, conf.int = TRUE)
tidy(ma.lm, conf.int = TRUE)
tidy(ma.lm, conf.int = TRUE) %>% class()
tidy(ma.lm, conf.int = TRUE) %>%
prep.flex()
tidy(ma.lm, conf.int = TRUE) %>%
prep.flex(digits = 2)
tidy(ma.lm, conf.int = TRUE) %>%
format_p(p.value) %>% prep.flex(digits = 2)
format_p <- function(dat, col = p, keep = "unused") {
mutate(dat, p = scales::pvalue( {{col}} ), .keep = keep)
}
tidy(ma.lm, conf.int = TRUE) %>%
format_p(p.value) %>% prep.flex(digits = 2)
if(!"packages" %in% ls()) source("scripts/load-packages.R")
source("scripts/functions.R")
load("objects/all-objects.RData")
dat
duid.att.df %>% filter(id %in% dat$id)
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id)
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id)
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
pivot_longer()
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
pivot_longer(cols = -c(id, ma.ingest))
glimpse(duid.att.df)
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
pivot_longer(select(-duid.att.full), cols = -c(id, ma.ingest))
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
pivot_longer(select(., -duid.att.full), cols = -c(id, ma.ingest))
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
select(-c(duid.att.risk, duid.att.sanction, duid.att.peer, duid.att.mean, duid.att.full))
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
select(-c(duid.att.risk, duid.att.sanction, duid.att.peer, duid.att.mean, duid.att.full)) %>%
pivot_longer(cols = -c(id, ma.ingest))
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
select(-c(duid.att.risk, duid.att.sanction, duid.att.peer, duid.att.mean, duid.att.full)) %>%
pivot_longer(cols = -c(id, ma.ingest)) %>%
mutate(dich.response = value > 4)
####| Logistic Regression ####
duid.att.df %>%
filter(id %in% dat$id) %>%
select(-c(duid.att.risk, duid.att.sanction, duid.att.peer, duid.att.mean, duid.att.full)) %>%
pivot_longer(cols = -c(id, ma.ingest)) %>%
mutate(dich.response = value > 4) %>%
pivot_wider(id_cols = -value, names_from = name, values_from = dich.response)
if(!"packages" %in% ls()) source("scripts/load-packages.R")
source("scripts/functions.R")
load("objects/all-objects.RData")
####| Regression Models ####
ma.lm <- lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, filter(dat, ma.ingest))
nma.lm <- lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, filter(dat, !ma.ingest))
ma.lm
summary(ma.lm)
ma.lm %>% tidy*()
ma.lm %>% tidy()
ma.lm %>% broom::tidy()
apaTables::test()
ma.lm %>% tidy(conf.int = TRUE)
install.packages("apaTables")
apaTables::apa.reg.table(ma.lm)
apaTables::apa.reg.table(ma.lm, table.number = 2)
ma.lm.tidy <- apaTables::apa.reg.table(ma.lm, table.number = 2)
nma.lm.tidy <- apaTables::apa.reg.table(nma.lm, table.number = 2)
apaTables::apa.save("test", ma.lm.tidy)
library(apaTables)
remove.packages("apaTables", lib="~/.R/R-4.3.1/library")
ma.lm.tidy <- tidy(ma.lm, conf.int = TRUE)
ma.lm.tidy <- tidy(ma.lm, conf.int = TRUE)
nma.lm.tidy <- tidy(nma.lm, conf.int = TRUE)
nma.lm.tidy
ma.lm.tidy %>%
mutate(estimate = round(estimate, 2))
ma.lm.tidy %>%
mutate(estimate = round(estimate, 2),
95%CI = 'test')
ma.lm.tidy %>%
mutate(estimate = round(estimate, 2),
`95% CI` = 'test')
ma.lm.tidy %>%
mutate(estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)))
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
.keep = "used")
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
.keep = "unused")
?mutate
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::label_pvalue(p.value))
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value))
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value))
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
select(term, Estimate, `95% CI`, p)
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
select(term, Estimate, `95% CI`, SE, p)
lm.effect.size
ma.lm.tidy
dat
dat %>%
filter(ma.ingest) %>%
lm.effect.size(duid.att.risk, dd.total)
install.packages('ppcor')
dat %>%
filter(ma.ingest) %>%
lm.effect.size(duid.att.risk, dd.total)
dat %>%
filter(ma.ingest) %>%
lm.effect.size("duid.att.risk", "dd.total")
dat %>%
filter(ma.ingest) %>%
lm.effect.size(c("duid.att.risk", "duid.att.sanction", "duid.att.peer"), "dd.total")
ma.effects <- dat %>%
filter(ma.ingest) %>%
lm.effect.size(c("duid.att.risk", "duid.att.sanction", "duid.att.peer"), "dd.total")
nma.effects <- dat %>%
filter(!ma.ingest) %>%
lm.effect.size(c("duid.att.risk", "duid.att.sanction", "duid.att.peer"), "dd.total")
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
select(term, Estimate, `95% CI`, SE, p)
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects)
ma.effects <- dat %>%
filter(ma.ingest) %>%
lm.effect.size(c("duid.att.risk", "duid.att.sanction", "duid.att.peer"), "dd.total") %>%
rename(term = Variable)
nma.effects <- dat %>%
filter(!ma.ingest) %>%
lm.effect.size(c("duid.att.risk", "duid.att.sanction", "duid.att.peer"), "dd.total") %>%
rename(term = Variable)
nma.effects <- dat %>%
filter(!ma.ingest) %>%
lm.effect.size(c("duid.att.risk", "duid.att.sanction", "duid.att.peer"), "dd.total") %>%
rename(term = Variable)
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects)
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, partial, f2, p)
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p)
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex()
set.flex.default()
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex()
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex(digits = 2)
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex(digits = 2) %>%
save.flex(name = "output/tables/ma-lm.docx")
ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex(digits = 2) %>%
save.flex(name = "ma-lm.docx")
ma.lm.ft <- ma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(ma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex(digits = 2)
nma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::p.value(p.value)) %>%
left_join(nma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex(digits = 2)
nma.lm.tidy
nma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(nma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex(digits = 2)
nma.lm.ft <- nma.lm.tidy %>%
mutate(Estimate = round(estimate, 2),
`95% CI` = str_c(round(conf.low, 2), " - ", round(conf.high, 2)),
SE = round(std.error, 2),
p = scales::pvalue(p.value)) %>%
left_join(nma.effects) %>%
select(term, Estimate, `95% CI`, SE, Partial, F2, p) %>%
prep.flex(digits = 2)
save.flex(nma.lm.ft, name = "nma-lm")
if(!"packages" %in% ls()) source("scripts/load-packages.R")
source("scripts/functions.R")
load("objects/all-objects.RData")
if(!"packages" %in% ls()) source("scripts/load-packages.R")
devtools::install_github("https://github.com/ajmackay/AzTools.git")
# devtools::install_github("https://github.com/ajmackay/AzTools.git")
source("scripts/functions.R")
load("objects/all-objects.RData")
####| Free & Constrained Models ####
# Free Model
mgp.model <- "dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer"
mgp.free <- sem(mgp.model, data = dat, group = "ma.ingest")
summary(mgp.free)
# Constrained Model
mgp.constrained <- sem(mgp.model, dat, group = "ma.ingest", group.equal = c("intercepts", "regressions"))
summary(mgp.constrained)
# Comparing two models
anova(mgp.free, mgp.constrained) #%>% broom::tidy()
####| Comparing single constraints ####
# Risk
mgp.risk.model <- c("dd.total ~ c(b1, b1) * duid.att.risk + duid.att.sanction + duid.att.peer")
mgp.risk <- sem(mgp.risk.model, dat, group = "ma.ingest")
anova(mgp.free, mgp.risk)
# Sanction
mgp.sanction.model <-  c("dd.total ~ c(b1, b1) * duid.att.sanction + duid.att.risk + duid.att.peer")
mgp.sanction <- sem(mgp.sanction.model, dat, group = "ma.ingest")
anova(mgp.free, mgp.sanction)
# Peer
mgp.peer.model <- c("dd.total ~ c(b1, b1) * duid.att.peer + duid.att.risk + duid.att.sanction")
mgp.peer <- sem(mgp.peer.model, dat, group = "ma.ingest")
anova(mgp.free, mgp.peer)
#### Piecewise SEM  ####
# (basically does all the above stuff in one go lol)
model.psem <- piecewiseSEM::psem(lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, dat))
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
multigroup.model <- piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
####| Model Fit ####
#####| Overall Model #####
summary(mgp.model)
####| Model Fit ####
#####| Overall Model #####
sem(mgp.model)
####| Model Fit ####
#####| Overall Model #####
sem(mgp.model, data = dat)
####| Model Fit ####
#####| Overall Model #####
overall.model <- sem(mgp.model, data = dat)
summary(overall.model, fit.measures = TRUE)
summary(overall.model, fit.measures = TRUE) %>% flextable()
summary(overall.model, fit.measures = TRUE) %>% broom::tidy()
summary(overall.model, fit.measures = TRUE) %>% broom::glance()
summary(overall.model, fit.measures = TRUE)
summary(overall.model, fit.measures = TRUE)\
summary(overall.model, fit.measures = TRUE)
mgp.model
summary(mgp.free, fit.measures = TRUE)
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
piecewiseSEM::psem(lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, dat))
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
summary(multigroup.model)
summary(multigroup.model, fit.measures = TRUE)
summary(multigroup.model)
?piecewiseSEM::psem()
model.psem
model.psem %>% summary()
summary(model.psem)
summary(model.psem, fit.measures = TRUE)
summary(overall.model, fit.measures = TRUE)
