inspect(cfa.att, 'std')$lambda %>% as_data_frame() %>% flextable()
inspect(cfa.att, 'std')$lambda %>% as_data_frame()
inspect(cfa.att, 'std')$lambda
inspect(cfa.att, 'std')$lambda %>% class()
inspect(cfa.att, 'std')$lambda %>% rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% str()
inspect(cfa.att, 'std')$lambda %>% unnest()
inspect(cfa.att, 'std')$lambda %>% as.data.frame()
inspect(cfa.att, 'std')$lambda %>% as.data.frame() %>% str()
inspect(cfa.att, 'std')$lambda %>% as.data.frame() %>% rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% as.tibble() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% tibble() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% as_tibble() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("test")
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>% flextable()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>% glimpse()
inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable")
tbl.factor.loadings <- inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>%
mutate(across(where(is.numeric), ~round(.x, 2)))
tbl.factor.loadings
tbl.factor.loadings <- inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>%
mutate(across(where(is.numeric), ~round(.x, 3)))
save.objects()
flextable(tbl.factor.loadings)
?inspect
tbl.cfa.loadings <- inspect(cfa.att, 'std')$lambda %>% data.frame() %>%  rownames_to_column("Variable") %>%
mutate(across(where(is.numeric), ~round(.x, 3)))
inspect(cfa.att, 'fitted')
inspect(cfa.att, 'information')
inspect(cfa.att, 'fit')
inspect(cfa.att, 'fit')
fitmeasures(cfa.att)
summary(cfa.att)
summary(cfa.att) %>% str()
summary(cfa.att, fit.measures = TRUE) %>% str()
summary(cfa.att, fit.measures = TRUE)$fit
summary(cfa.att, fit.measures = TRUE)
summary(cfa.att, fit.measures = TRUE) %>% flextable()
summary(cfa.att, fit.measures = TRUE) %>% str()
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
#### Piecewise SEM  ####
# (basically does all the above stuff in one go lol)
model.psem <- piecewiseSEM::psem(lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, dat))
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
#### T test between groups for DD ####
dat %>% t_test(dd.total ~ ma.ingest) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
t.test(dd.total ~ ma.ingest, data = dat)
#### Piecewise SEM  ####
# (basically does all the above stuff in one go lol)
model.psem <- piecewiseSEM::psem(lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer, dat))
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
tbl.cfa.loadings
tbl.cfa.loadings %>% flextable()
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3)
a
summary(cfa.att, standardized = TRUE, fit.measures = TRUE)
save.objects()
#| echo: false
piecewiseSEM::multigroup(model.psem, group = "ma.ingest")
dat
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = 'Vanilla')
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = 'vanilla')
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = theme_vanilla())
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = "theme_vanilla")
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = "theme_zebra")
flextable(tbl.cfa.loadings)
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 3, theme_fun = "theme_vanilla")
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla') {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun
)
}
set.default.ft()
flextable(tbl.cfa.loadings)
set.default.ft(font.family = 'Times New Roman')
flextable(tbl.cfa.loadings)
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla',
digits = 3, ...) {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun,
digits = digits
)
}
set.default.ft()
flextable(tbl.cfa.loadings)
set.default.ft(digits = 2)
flextable(tbl.cfa.loadings)
set.default.ft(digits = 1)
tibble(x = runif(10), y = runif(10))
tibble(x = runif(10), y = runif(10)) %>% flextable()
set.default.ft(digits = 1)
tibble(x = runif(10), y = runif(10)) %>% flextable()
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = formatC(digits = 1), theme_fun = "theme_vanilla")
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 1, theme_fun = "theme_vanilla")
tibble(x = runif(10), y = runif(10)) %>% flextable()
tibble(x = runif(10), y = runif(10)) %>% qflextable()
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 1, decimal.mark = '.', theme_fun = "theme_vanilla")
tibble(x = runif(10), y = runif(10)) %>% qflextable()
tibble(x = runif(10), y = runif(10)) %>% flextable()
set_flextable_defaults(
digits = 2,
decimal.mark = ",",
big.mark = " ",
na_str = "<na>"
)
tibble(x = runif(10), y = runif(10)) %>% flextable()
head(airquality) |>
mutate(rnum = runif(6, min = 100000, max = 10000000)) |>
qflextable()
set_flextable_defaults(
digits = 3,
decimal.mark = ",",
big.mark = " ",
na_str = "<na>"
)
head(airquality) |>
mutate(rnum = runif(6, min = 100000, max = 10000000)) |>
qflextable()
?qflextable
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla',
digits = 3, ...) {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun,
digits = digits
)
}
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 2, theme_fun = "theme_vanilla")
flextable(tbl.cfa.loadings) %>% flextable::colformat_double()
set_flextable_defaults(font.family = 'Calibri', font.size = 10, padding = 6, table.layout = 'autofit', digits = 2, decimal.mark = '.', theme_fun = "theme_vanilla")
flextable(tbl.cfa.loadings) %>% flextable::colformat_double()
#### Flextable defaults ####
set.default.ft <- function(font.family = 'Calibri',
font.size = 10,
layout = 'autofit',
padding = 6,
theme_fun = 'theme_vanilla',
digits = 3, ...) {
flextable::set_flextable_defaults(
font.family = font.family,
font.size = font.size,
layout = layout,
padding = padding,
theme_fun = theme_fun,
digits = digits)
if(digits != 3){
cat(crayon::red("Use colformat_double() to adjust digits"))
}
cat(crayon::green("Flextable Default Set"))
}
set.default.ft()
flextable(tbl.cfa.loadings) %>% flextable::colformat_double()
# Reliability and Factor Loadings
if(!"packages" %in% ls()) source("scripts/load-packages.R")
library(AzTools)
library(AzTools)
load("objects/all-objects.RData")
find.package('librarian')
find.package('scoobs')
require('librarian')
requre('scoobs')
require('scoobs')
installed.packages()
'scoobs' %in% installed.packages()
'AzTools' %in% installed.packages()
'librarian' %in% installed.packages()
!'librarian' %in% installed.packages()
if(!'librarian' %in% installed.packages()) install.packages('librarian')
save.objects
file.info('objects/all-objects.RData')
x <- file.info('objects/all-objects.RData')
summary(x)
glimpse(x)
x$mtime
survey.df %>%
filter(ma.ingest, status!= "Spam", ma.most.common, finished)
survey.files <- list.files("data/", pattern = "*Meth-Survey.csv")
survey.files
survey.file <- survey.files[length(survey.files)]
survey.file
#### File moving ####
to.move <- survey.files[!survey.files == survey.file]
old.path <- str_c("data/", to.move)
new.path <- str_c("data/archive/", to.move)
to.move
!is_empty(to.move)
if(!is_empty(to.move)){
if(file.copy(old.path, new.path)){
file.remove(old.path)
}
# Headers
survey.headers <- read_csv(str_c("data/", survey.file), n_max = 1) %>%
names() %>%
tolower() %>%
str_replace("\\.\\.\\.", "\\.") %>%
str_replace("\\_", "\\.") %>%
str_replace("duration \\(in seconds\\)", "duration")
survey.raw <- read_csv(str_c("data/", survey.file), skip = 2)
colnames(survey.raw) <- survey.headers
survey.raw <- survey.raw %>%
mutate(id = row_number(),
.before = 1)
saveRDS(survey.raw, file = "objects/survey-raw.RData")
}else survey.raw <- readRDS("objects/survey-raw.RData")
survey.raw
survey.files
survey.files == survey.file
!survey.files == survey.file
load.data.flag <- logical()
load.data.flag
is_empty(load.data.flag)
exists(load.data.flag)
exists(load.data.flag)
load.data.flag <- TRUE
exists(load.data.flag)
load.data.flag
exists(load.data.flag)
exists(packages)
exists('load.data.flag')
..load.data <- TRUE
..load.data
rm(str_detect('load.data'))
str_detect(ls(), 'load.data')
ls()[str_detect(ls(), 'load.data')]
ls()[str_detect(ls(), 'load.data')] %>% rm()
ls()[str_detect(ls(), 'load.data')]
rm('load.data')
rm('load.data.flag')
..load.data <- logical()
..load.data
exists('..load.data')
!exists('..load.data')
rm('..load.data')
.load.data <- logical()
if(!exists('.load.data')) source('scripts/load-data.R')
exists('packages')
.load-data <- logical()
.data.processing <- logical()
#### Demographics ####
dat
dat.dems <- select(summ.df, id, ma.ingest, age, sex, education, area.live) %>%
filter(id %in% c(ma.ids, n.ndu.ids)) %>%
# DDDI
left_join(select(dd.df, id, dd.ne.total, dd.ad.total, dd.rd.total, dd.total)) %>%
# DUID
left_join(select(duid.att.df, id, duid.att.risk, duid.att.sanction, duid.att.peer, duid.att.mean))
dat.dems
glimpse(dat.dems)
glimpse(dat)
dems.df
#### Demographics ####
dat.dems %>%
filter(id %in% dat$id)
#### Demographics ####
id.sample <- dat$id
id.sample
dat.dems %>%
filter(id %in% id.sample)
id.sample
dat.dems %>%
filter(id %in% id.sample) %>% glimpse()
glimpse(summ.df)
dat %>% filter(ma.ingest)
length(ma.ids)
summ.df %>%
filter(id %in% id.sample) %>%
select(id, ma.ingest, age, sex, ethnicity, marital.status, education, employment.status,
area.live, license.status)
summ.df %>% filter(k6.total)
summ.df %>% filter(k6.full)
summ.df %>%
filter(id %in% id.sample)
summ.df %>%
filter(id %in% id.sample, dems.full)
summ.df %>%
filter(id %in% id.sample, dems.full, k6.full)
summ.df %>%
filter(id %in% id.sample, dems.full) %>%
select(id, ma.ingest, age, sex, ethnicity, marital.status, education, employment.status,
area.live, license.status, ma.use.peak, sds.total, ma.type, ma.use.age, k6.total, k6.full)
summ.df %>%
filter(id %in% id.sample, dems.full) %>%
select(id, ma.ingest, age, sex, ethnicity, marital.status, education, employment.status,
area.live, license.status, ma.use.peak, sds.total, ma.type, ma.use.age, k6.total, k6.full) %>%
filter(!k6.full) %>% relocate(k6.total)
dat.dems
dat.dems <- summ.df %>%
filter(id %in% id.sample, dems.full) %>%
select(id, ma.ingest, age, sex, ethnicity, marital.status, education, employment.status,
area.live, license.status, ma.use.peak, sds.total, ma.type, ma.use.age, k6.total, k6.full)
dat.dems %>%
pivot_longer(cols = -c(id, ma.ingest))
dat.dems %>%
summ.tbl(summ.by = ma.ingest)
dat.dems %>%
summ.tbl()
dat.dems %>%
summ.tbl(summ.by = 'ma.ingest')
if(!"packages" %in% ls()) source("scripts/load-packages.R")
source("scripts/functions.R")
load("objects/all-objects.RData")
p.att.score
#### Attitudes boxplot ####
dat.long <- dat %>%
pivot_longer(cols = c(duid.att.risk, duid.att.sanction, duid.att.peer), names_to = "att.subscale") %>%
mutate(
# att.subscale = factor(att.subscale, levels = c("duid.att.risk", "duid.att.sanction", "duid.att.peer")),
att.subscale = case_when(
att.subscale == "duid.att.risk" ~ "Risks",
att.subscale == "duid.att.sanction" ~ "Sanctions",
att.subscale == "duid.att.peer" ~ "Peer Attitudes"
),
group = if_else(ma.ingest, "Methamphetamine Users", "Non-Drug Users"))
stat.test <- dat.long %>%
group_by(att.subscale) %>%
t_test(value ~ group) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
p.att.score <- ggboxplot(dat.long, x = "att.subscale", y = "value", width = 0.5, fill = "group") +
stat_pvalue_manual(stat.test, x = "att.subscale", y.position = 7.5, label = "p.adj") +
labs(fill = element_blank(),
x = "Attitude Factor",
y = "Score (Higher = More Favourable)") +
scale_fill_brewer(palette = "OrRd") +
scale_y_continuous(breaks = seq(2, 7, 1)) +
theme(axis.title = element_text(face = 'bold'))
p.att.score
# Summary of Data ---------------------------------------------------------
t.summ <- select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest,
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(dd.total ~ "DDDI Total",
duid.att.mean ~ "DUID Attitude Mean",
duid.att.risk ~ "DUID Attitude (Risk)",
duid.att.sanction ~ "DUID Attitude (Sanction)",
duid.att.peer ~ "DUID Attitude (Peer)")) %>% add_p()
t.summ
summ.tbl
dat
#### Demographics ####
id.sample <- dat$id
dat.dems <- summ.df %>%
filter(id %in% id.sample, dems.full) %>%
select(id, ma.ingest, age, sex, ethnicity, marital.status, education, employment.status,
area.live, license.status, ma.use.peak, sds.total, ma.type, ma.use.age, k6.total, k6.full)
dat.dems %>%
summ.tbl(summ.by = 'ma.ingest')
summ.tbl
glimpse(dat.dems)
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
select(ma.ingest, age, sex) %>%
summ.tbl(summ.by = 'ma.ingest')
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, age, sex) %>%
summ.tbl(summ.by = 'ma.ingest')
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
summ.tbl(summ.by = 'ma.ingest')
detach("package:AzTools", unload = TRUE)
library(AzTools)
set.default.ft()
AzTools::set.default.ft()
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
ft.summ(summ.by = 'ma.ingest')
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
ft.summary(summ.by = 'ma.ingest')
t.summ
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
ft.summary(summ.by = 'ma.ingest') %>% add_p()
detach("package:AzTools", unload = TRUE)
library(AzTools)
detach("package:AzTools", unload = TRUE)
library(AzTools)
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
ft.summary(summ.by = 'ma.ingest', include.p = TRUE)
# For ARSC Conference
#### Age and Gender Breakdown ####
dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
ft.summary(summ.by = 'ma.ingest') %>%
save_as_docx("output/age-gender-breakdown.docx")
# For ARSC Conference
#### Age and Gender Breakdown ####
tbl.age.gender <- dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
ft.summary(summ.by = 'ma.ingest')
if(FALSE) save_as_docx(tbl.age.gender, path = "output/age-gender-breakdown.docx")
save_as_docx(tbl.age.gender, path = "output/age-gender-breakdown.docx")
# For ARSC Conference
#### Age and Gender Breakdown ####
tbl.age.gender <- dat.dems %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
select(ma.ingest, Age = age, Sex = sex) %>%
ft.summary(summ.by = 'ma.ingest', include.p = TRUE)
if(FALSE) save_as_docx(tbl.age.gender, path = "output/age-gender-breakdown.docx")
save_as_docx(tbl.age.gender, path = "output/age-gender-breakdown.docx")
#### Attitudes boxplot ####
dat.long <- dat %>%
pivot_longer(cols = c(duid.att.risk, duid.att.sanction, duid.att.peer), names_to = "att.subscale") %>%
mutate(
# att.subscale = factor(att.subscale, levels = c("duid.att.risk", "duid.att.sanction", "duid.att.peer")),
att.subscale = case_when(
att.subscale == "duid.att.risk" ~ "Favourable Attitude to Risks",
att.subscale == "duid.att.sanction" ~ "Unfavourable Attitude to Sanctions",
att.subscale == "duid.att.peer" ~ "Favourable Peer Attitudes"
),
group = if_else(ma.ingest, "Methamphetamine Users", "Non-Drug Users"))
stat.test <- dat.long %>%
group_by(att.subscale) %>%
t_test(value ~ group) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
p.att.score <- ggboxplot(dat.long, x = "att.subscale", y = "value", width = 0.5, fill = "group") +
stat_pvalue_manual(stat.test, x = "att.subscale", y.position = 7.5, label = "p.adj") +
labs(fill = element_blank(),
x = "Attitude Factor",
y = "Score") +
scale_fill_brewer(palette = "OrRd") +
scale_y_continuous(breaks = seq(2, 7, 1)) +
theme(axis.title = element_text(face = 'bold'))
p.att.score
#### Attitudes boxplot ####
dat.long <- dat %>%
pivot_longer(cols = c(duid.att.risk, duid.att.sanction, duid.att.peer), names_to = "att.subscale") %>%
mutate(
# att.subscale = factor(att.subscale, levels = c("duid.att.risk", "duid.att.sanction", "duid.att.peer")),
att.subscale = case_when(
att.subscale == "duid.att.risk" ~ "Favourable Attitude to Risks",
att.subscale == "duid.att.sanction" ~ "Unfavourable Attitude to \nSanctions",
att.subscale == "duid.att.peer" ~ "Favourable Peer Attitudes"
),
group = if_else(ma.ingest, "Methamphetamine Users", "Non-Drug Users"))
stat.test <- dat.long %>%
group_by(att.subscale) %>%
t_test(value ~ group) %>%
adjust_pvalue() %>%
add_significance("p.adj") %>%
mutate(p.adj = scales::pvalue(p.adj))
p.att.score <- ggboxplot(dat.long, x = "att.subscale", y = "value", width = 0.5, fill = "group") +
stat_pvalue_manual(stat.test, x = "att.subscale", y.position = 7.5, label = "p.adj") +
labs(fill = element_blank(),
x = "Attitude Factor",
y = "Score") +
scale_fill_brewer(palette = "OrRd") +
scale_y_continuous(breaks = seq(2, 7, 1)) +
theme(axis.title = element_text(face = 'bold'))
p.att.score
ggsave(p.att.score, width = 900, height = 700, units = 'px', dpi = 95, filename = "output/attitude-boxplot.png")
