p.ma.2 <- autoplot(lm.full, 2) + labs(title = "MA Data")
p.ndu.1 <- autoplot(lm.ndu.2) + labs(title = "NDU Data")
autoplot(lm.full, 3)
##### Homogeneity of Variance #####
p.full.3 <- autoplot(lm.full, 3) + labs(title = "Full Data")
p.ma.2 <- autoplot(lm.ma, 2) + labs(title = "MA Data")
p.ndu.1 <- autoplot(lm.ndu.2) + labs(title = "NDU Data")
p.ma.3 <- autoplot(lm.ma, 3) + labs(title = "MA Data")
p.ndu.3 <- autoplot(lm.ndu, 3) + labs(title = "NDU Data")
autoplot(lm.full, 5)
#### Multicolinearity ####
corrplot::corrplot(duid.cor,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = 'n',
type = 'lower')
duid.cor <- cor(select(dat, all_of(duid.vars), dd.total))
#### Multicolinearity ####
corrplot::corrplot(duid.cor,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = 'n',
type = 'lower')
duid.cor.ma <- cor(select(filter(dat, ma.ingest), all_of(duid.vars), dd.total))
duid.cor.ndu <- cor(select(filter(dat, !ma.ingest), all_of(duid.vars), dd.total))
#### Multicolinearity ####
p.cor.full <- corrplot::corrplot(duid.cor,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = 'n',
type = 'lower')
p.cor.ma <- corrplot::corrplot(duid.cor.ma,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = 'n')
p.cor.ma <- corrplot::corrplot(duid.cor.ma,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black")
p.cor.ma <- corrplot::corrplot(duid.cor.ma,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = 'n',
type = 'lower')
p.cor.ndu <- corrplot::corrplot(duid.cor.ndu,
tl.col = 'black', tl.srt = 45,
col = col(200), addCoef.col = 'black', cl.pos = 'n',
type = 'lower')
p.cor.ndu
p.cor.full
corrplot::corrplot(duid.cor,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = 'n',
type = 'lower')
class(p.cor.full)
p.cor.full$arg
p.cor.full$corr
p.cor.full$corrPos
View(p.lm.full.1)
View(p.lm.full.1)
rm(p.lm.ma.1)
rm(c(p.lm.nda.1, p.lm.full.1))
rm(c(p.lm.nda.1))
rm(p.lm.nda.1)
rm(p.lm.full.1)
save.objects()
#### Assumption Checks ####
##### Linearity #####
p.full.1 <- autoplot(lm.full, 1) + labs(title = "Full Data")
p.ma.1 <- autoplot(lm.ma, 1) + labs(title = "MA Data")
p.ndu.1 <- autoplot(lm.ndu, 1) + labs(title = "NDU Data")
##### Normal Distribution of Residuals #####
p.full.2 <- autoplot(lm.full, 2) + labs(title = "Full Data")
p.ma.2 <- autoplot(lm.ma, 2) + labs(title = "MA Data")
p.ndu.2 <- autoplot(lm.ndu.2) + labs(title = "NDU Data")
##### Homogeneity of Variance #####
p.full.3 <- autoplot(lm.full, 3) + labs(title = "Full Data")
p.ma.3 <- autoplot(lm.ma, 3) + labs(title = "MA Data")
p.ndu.3 <- autoplot(lm.ndu, 3) + labs(title = "NDU Data")
#### Multicolinearity ####
p.cor.full <- corrplot::corrplot(duid.cor,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = 'n',
type = 'lower')
save.objects()
p.full.1 <- autoplot(lm.full, 1) + labs(title = "Full Data")
p.ma.1 <- autoplot(lm.ma, 1) + labs(title = "MA Data")
p.ndu.1 <- autoplot(lm.ndu, 1) + labs(title = "NDU Data")
##### Normal Distribution of Residuals #####
p.full.2 <- autoplot(lm.full, 2) + labs(title = "Full Data")
p.ma.2 <- autoplot(lm.ma, 2) + labs(title = "MA Data")
p.ndu.2 <- autoplot(lm.ndu.2) + labs(title = "NDU Data")
p.ndu.2 <- autoplot(lm.ndu, 2) + labs(title = "NDU Data")
save.objects()
# Individual Multicolinearity Diagnostics
mctest::imcdiag(ma.lm)
# Individual Multicolinearity Diagnostics
mctest::imcdiag(lm.ma)
# Individual Multicolinearity Diagnostics
mctest::imcdiag(lm.ma) %>% as_tibble()
# Individual Multicolinearity Diagnostics
mctest::imcdiag(lm.ma) %>% gt()
# Individual Multicolinearity Diagnostics
mctest::imcdiag(lm.ma) %>% flextable()
# Individual Multicolinearity Diagnostics
x <- mctest::imcdiag(lm.ma)
x$idiags
# Individual Multicolinearity Diagnostics
mcl.full <- mctest::imcdiag(lm.ma) %>% {.$idiags}
mc.full
mcl.full
mctest::imcdiag(lm.ma) %>%
{.$idiags} %>% select(VIF)
mctest::imcdiag(lm.ma) %>%
{.$idiags} %>% select('VIF')
mctest::imcdiag(lm.ma) %>%
{.$idiags} %>% as_tibble()
mcl.full
glimpse(mcl.full)
class(mcl.full)
mcl.full %>% as_tibble()
mcl.full %>% data.frame()
mcl.full %>% data.frame() %>% as_tibble()
# Individual Multicolinearity Diagnostics
mcl.full <- mctest::imcdiag(lm.full)
mcl.full
mcl.full$x
mcl.full$alldiag
mcl.full$idiags
# Individual Multicolinearity Diagnostics
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data_frame()
# Individual Multicolinearity Diagnostics
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% tibble()
mcl.full
# Individual Multicolinearity Diagnostics
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame()
mcl.full
# Individual Multicolinearity Diagnostics
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame() %>% select(VIF)
mcl.full
# Individual Multicolinearity Diagnostics
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame() %>% select(VIF, TOL)
mcl.full %>% flextable()
mcl.full
glimpse(mcl.full)
str(mlc.full)
str(mcl.full)
# Individual Multicolinearity Diagnostics
##
row.names <- c("DUID Risk", "DUID Sanction", "DUID Peer")
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame() %>%
select(VIF, TOL) %>%
add_column(var = row.names)
mcl.full
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame() %>%
select(VIF, TOL) %>%
add_column(var = row.names) %>%
as_tibble()
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame() %>%
select(VIF, TOL) %>%
add_column(var = row.names) %>%
tibble()
mcl.full
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame() %>%
select(VIF, TOL) %>%
add_column(var = row.names) %>%
tibble() %>% relocate(var)
?add_column
mcl.full <- mctest::imcdiag(lm.full) %>%
{.$idiags} %>% data.frame() %>%
select(VIF, TOL) %>%
add_column(var = row.names, .before = 1) %>%
tibble()
mcl.full
## MA
mcl.ma <- mctest::imcdiag(lm.ma) %>%
{.$idiags} %>% data.frame() %>%
select(VIF, TOL) %>%
add_column(var = row.names, .before = 1) %>%
tibble()
mcl.ma
## NDU
mcl.ndu <- mctest::imcdiag(lm.ndu) %>%
{.$idiags} %>% data.frame() %>%
select(VIF, TOL) %>%
add_column(var = row.names, .before = 1) %>%
tibble()
save.objects()
#| echo: false
mcl.full %>%
flextable()
mcl.full %>% mutate(across(where(is.numeric), ~round(.x, 2)))
x <- names(mcl.full)
x
x %>% str_to_title()
x
x == "VIF"
x == upp()
str_to_upper(x)
x
str_detect(x, "[[:upper:]]")
str_detect(x, "[:upper:]")
x <- append(x, "Test")
x
str_detect(x, "[:upper:]")
str_detect(x, "^[:upper:]+$")
str_detect(x, "^[[:upper:]]+$")
already.up <- str_detect(x, "[:upper:]")
x[!already.up]
x
already.up
already.up <- str_detect(x, "^[:upper:]+$")
already.up
x[!already.up]
x
str_to_lower(x[!already.up])
str_to_title(x[!already.up])
#### Prep Table ####
prep.table <- function(dat, dp = 2){
# Turning names into title
# dat.names <- names(dat)
# already.up <- str_detect(x, "^[:upper:]+$")
# str_to_title(dat.names[!already.up])
dat %>%
mutate(across(where(is.numberic), ~round(.x, df)))
}
#### Prep Table ####
prep.table <- function(dat, dp = 2){
# Turning names into title
# dat.names <- names(dat)
# already.up <- str_detect(x, "^[:upper:]+$")
# str_to_title(dat.names[!already.up])
dat %>%
mutate(across(where(is.numberic), ~round(.x, df)))
dat
}
mcl.full %>%
pre.table()
mcl.full %>%
prep.table()
#### Prep Table ####
prep.table <- function(dat, dp = 2){
# Turning names into title
# dat.names <- names(dat)
# already.up <- str_detect(x, "^[:upper:]+$")
# str_to_title(dat.names[!already.up])
dat %>%
mutate(across(where(is.numeric), ~round(.x, df)))
dat
}
mcl.full %>%
prep.table()
mcl.full
mcl.ma
mcl.ma %>% prep.table()
#### Prep Table ####
prep.table <- function(dat, dp = 2){
# Turning names into title
# dat.names <- names(dat)
# already.up <- str_detect(x, "^[:upper:]+$")
# str_to_title(dat.names[!already.up])
dat %>%
mutate(across(where(is.numeric), ~round(.x, dp)))
dat
}
mcl.ma %>% prep.table()
mcl.ma %>% prep.table() %>% flextable()
#### Prep Table ####
prep.table <- function(dat, dp = 2){
# Turning names into title
# dat.names <- names(dat)
# already.up <- str_detect(x, "^[:upper:]+$")
# str_to_title(dat.names[!already.up])
dat <- dat %>%
mutate(across(where(is.numeric), ~round(.x, dp)))
dat
}
mcl.ma %>% prep.table() %>% flextable()
#| echo: false
mcl.full %>%
prep.table() %>%
flextable()
#| echo: false
mcl.full %>%
prep.table() %>%
flextable() %>%
set_caption("test")
mcl.ndu %>%
prep.table() %>%
flextable() %>%
set_caption("Multicolinearity (NDU Data)")
flextable::set_flextable_defaults(theme_fun = theme_vanilla)
mcl.ndu %>%
prep.table() %>%
flextable() %>%
set_caption("Multicolinearity (NDU Data)")
flextable::set_flextable_defaults(theme_fun = theme_zebra)
mcl.ndu %>%
prep.table() %>%
flextable() %>%
set_caption("Multicolinearity (NDU Data)")
set_flextable_defaults(theme_fun = theme_vanilla)
mcl.full %>%
prep.table() %>%
flextable() %>%
set_caption("Multicolinearity (Full Data)")
?set_flextable_defaults()
lm.full %>% summary()
# Checking Assumptions ----------------------------------------------------
#### Prep ####
##### Regression Model #####
# Full Data (including meth use)
lm.full <- lm(dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer + ma.ingest, data = dat)
summary(lm.full)
#### Assumption Checks ####
##### Linearity #####
p.full.1 <- autoplot(lm.full, 1) + labs(title = "Full Data")
p.full.1
autoplot(lm.full)
plot(lm.full)
plot(lm.full)
summary(lm.full)
##### Normal Distribution of Residuals #####
p.full.2 <- autoplot(lm.full, 2) + labs(title = "Full Data") +theme_minimal()
p.full.2
##### Normal Distribution of Residuals #####
p.full.2 <- autoplot(lm.full, 2) + labs(title = "Full Data") +theme_light()
p.full.2
#### Assumption Checks ####
##### Linearity #####
p.full.1 <- autoplot(lm.full, 1) + labs(title = "Full Data") + theme_light()
p.ma.1 <- autoplot(lm.ma, 1) + labs(title = "MA Data") + theme_light()
p.ndu.1 <- autoplot(lm.ndu, 1) + labs(title = "NDU Data") + theme_light()
p.ma.2 <- autoplot(lm.ma, 2) + labs(title = "MA Data") + theme_light()
p.ndu.2 <- autoplot(lm.ndu, 2) + labs(title = "NDU Data") + theme_light()
##### Homogeneity of Variance #####
p.full.3 <- autoplot(lm.full, 3) + labs(title = "Full Data") + theme_light()
p.ma.3 <- autoplot(lm.ma, 3) + labs(title = "MA Data") + theme_light()
p.ndu.3 <- autoplot(lm.ndu, 3) + labs(title = "NDU Data") + theme_light()
save.objects()
glimpse(dat)
# Summary of Data ---------------------------------------------------------
tbl_summary(select(dat, -c(dd.ne.total, dd.ad.total, dd.rd.total)))
# Summary of Data ---------------------------------------------------------
tbl_summary(select(dat, -c(dd.ne.total, dd.ad.total, dd.rd.total)), by = ma.ingest)
# Summary of Data ---------------------------------------------------------
select(dat, -c(dd.ne.total, dd.ad.total, dd.rd.total)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest)
# Summary of Data ---------------------------------------------------------
select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest)
?tbl_summary
# Summary of Data ---------------------------------------------------------
select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest, statistic = list(all_continuous() ~ "{mean} ({sd})"))
# Summary of Data ---------------------------------------------------------
select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest, statistic = list(all_continuous() ~ "{mean} ({sd})"), label = list(dd.total ~ "DDDD"))
# Summary of Data ---------------------------------------------------------
select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total, duid.att.mean)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest,
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(dd.total ~ "DDDI Total",
duid.att.risk ~ "DUID Attitude (Risk)",
duid.att.sanction ~ "DUID Attitude (Sanction)",
duid.att.peer ~ "DUID Attitude (Peer)"))
# Summary of Data ---------------------------------------------------------
select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total, duid.att.mean)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest,
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(dd.total ~ "DDDI Total",
duid.att.risk ~ "DUID Attitude (Risk)",
duid.att.sanction ~ "DUID Attitude (Sanction)",
duid.att.peer ~ "DUID Attitude (Peer)")) %>%
as_flextable()
# Summary of Data ---------------------------------------------------------
select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total, duid.att.mean)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest,
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(dd.total ~ "DDDI Total",
duid.att.risk ~ "DUID Attitude (Risk)",
duid.att.sanction ~ "DUID Attitude (Sanction)",
duid.att.peer ~ "DUID Attitude (Peer)")) %>%
as_flex_table()
# Summary of Data ---------------------------------------------------------
t.summ <- select(dat, -c(id, dd.ne.total, dd.ad.total, dd.rd.total, duid.att.mean)) %>%
mutate(ma.ingest = if_else(ma.ingest, "MA User", "Non-Drug User")) %>%
tbl_summary(by = ma.ingest,
statistic = list(all_continuous() ~ "{mean} ({sd})"),
label = list(dd.total ~ "DDDI Total",
duid.att.risk ~ "DUID Attitude (Risk)",
duid.att.sanction ~ "DUID Attitude (Sanction)",
duid.att.peer ~ "DUID Attitude (Peer)")) %>%
as_flex_table()
save.objects()
t.summ
p.ma.1
dat %>%
filter(ma.ingest)
dat %>%
filter(ma.ingest) %>%
ggplot(aes(x = duid.att.peer, y = dd.total)) +
geom_point()
?geom_jitter
dat %>%
filter(ma.ingest) %>%
ggplot(aes(x = duid.att.peer, y = dd.total)) +
geom_jitter(height = 0)
dat %>%
filter(ma.ingest) %>%
ggplot(aes(x = duid.att.peer, y = dd.total)) +
geom_jitter(height = 0.1)
dat %>%
filter(ma.ingest) %>%
ggplot(aes(x = duid.att.peer, y = dd.total)) +
geom_jitter(height = 0, width = 0.1)
dat %>%
filter(ma.ingest) %>%
ggplot(aes(x = duid.att.peer, y = dd.total)) +
geom_jitter(height = 0, width = 0.1) +
theme_light()
if(!"packages" %in% ls()){
source("scripts/load-packages.R")
}
source("scripts/functions.R")
load("objects/all-objects.RData")
usethis::create_from_github("https://github.com/ajmackay/statistical-analyses.git", destdir = "C:/Users/aaronmackay/Documents/Projects")
#### Free Model ####
dat
glimpse(dat)
#### Free Model ####
mgp.model <- c("dd.total ~ duid.att.risk", "dd.total ~ duid.att.sanction", "dd.total ~ duid.att.peer")
mgp.model
mgp.free <- sem(mgp.model, data = dat, group = "ma.ingest")
summary(mgp.free)
summary(mgp.free)
mgp.constrained <- sem(mgp.model, dat, group = "ma.ingest", group.equal = c("intercepts", "regressions"))
summary(mgp.constrained)
anova(mgp.free, mgp.constrained)
scales::pvalue
number()
scales::number
summary(mgp.free)
mgp.test <- c("duid.att.risk ~ duid.att.sanction", "duid.att.sanction ~ duid.att.peer", "duid.att.risk ~ duid.att.peer")
sem(mgp.test, data = dat, group = "ma.ingest") %>% summary()
mgp.test <- c("duid.att.risk ~ duid.att.sanction", "duid.att.sanction ~ duid.att.peer")
sem(mgp.test, data = dat, group = "ma.ingest") %>% summary()
#### Sandbox ####
# Testing to try and get chi-square statistic
mgp.test <- c("dd.total ~ duid.att.risk", "dd.total ~ duid.att.sanction")
sem(mgp.test, data = dat, group = "ma.ingest") %>% summary()
#### Sandbox ####
# Testing to try and get chi-square statistic
mgp.test <- c("dd.total ~ duid.att.risk", "dd.total ~ duid.att.sanction")
sem(mgp.test, data = dat, group = "ma.ingest") %>% summary()
mgp.test <- c("duid.att.risk ~ duid.att.sanction", "duid.att.sanction ~ duid.att.peer")
sem(mgp.test, data = dat, group = "ma.ingest") %>% summary()
#### Free Model ####
mgp.model <- c("dd.total ~ duid.att.risk", "dd.total ~ duid.att.sanction", "dd.total ~ duid.att.peer")
mgp.free <- sem(mgp.model, data = dat, group = "ma.ingest")
summary(mgp.free)
summary(lm.ndu)
anova(mgp.free, mgp.constrained)
anova(mgp.free, mgp.constrained) %>% broom::tidy()
'dd.total ~ c()'
'
y ~ c("b1", "b1") * x
z ~ y
'
#### Comparing single constraints ####
# Risk
mgp.risk <- c("dd.total ~ c(b1, b1) * duid.att.risk", "dd.total ~ duid.att.sanction", "dd.total ~ duid.att.peer")
mgp.risk
anova(mgp.free, mgp.risk)
#### Comparing single constraints ####
# Risk
mgp.risk.model <- c("dd.total ~ c(b1, b1) * duid.att.risk", "dd.total ~ duid.att.sanction", "dd.total ~ duid.att.peer")
#### Comparing single constraints ####
# Risk
mgp.risk.model <- c("dd.total ~ c(b1, b1) * duid.att.risk", "dd.total ~ duid.att.sanction", "dd.total ~ duid.att.peer")
mgp.risk <- sem(mgp.risk.model, dat, group = "ma.ingest")
summary(mgp.risk)
summary(mgp.risk)
summary(mgp.risk) %>% broom::tidy()
summary(mgp.risk)
mgp.risk.model <- '
dd.total ~ c("b1", "b1") * duid.att.risk
dd.total ~ duid.att.sanction
dd.total ~ duid.att.peer
'
mgp.risk.model
mgp.risk <- sem(mgp.risk.model, dat, group = "ma.ingest")
summary(mgp.risk)
anova(mgp.free, mgp.risk)
summary(mgp.free)
mgp.model <- "dd.total ~ duid.att.risk + duid.att.sanction + duid.att.peer"
mgp.free <- sem(mgp.model, data = dat, group = "ma.ingest")
summary(mgp.free)
summary(mgp.risk)
mgp.risk.model <- c("dd.total ~ c(b1, b1) * duid.att.risk + duid.att.sanction + duid.att.peer")
mgp.risk <- sem(mgp.risk.model, dat, group = "ma.ingest")
summary(mgp.risk)
